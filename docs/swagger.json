{
    "swagger": "2.0",
    "info": {
        "description": "# URLr link shortener API\n\n## Technologies Used\n\n- Go\n- Fiber\n- UUID\n- Distributed In-Memory Key-Value Store\n\n### Description\n\nWe are using a distributed in-memory key-value store to store data related to rate limiter and shortened urls.\nWe are using Redis cloud as a DaaS.\n",
        "title": "URLr APIs",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Harsh Pareeek",
            "url": "https://www.github.com/harshtalks",
            "email": "harshpareek91@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:3000",
    "basePath": "/",
    "paths": {
        "/create": {
            "post": {
                "description": "create the shortened url by providing the url, expiration time, and custom tag. All are necessary. for server generated tag, give custom tag as empty string.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Create Shortened URL"
                ],
                "summary": "Create a shortened URL",
                "parameters": [
                    {
                        "description": "The input request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.RequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    }
                }
            }
        },
        "/{tag}": {
            "get": {
                "description": "redirect to original url by tag (shortened url tag)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fetch URL"
                ],
                "summary": "Fetch the shortened Url from the redis and then redirect to the original url upon success.",
                "operationId": "redirect-from-custom-url",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Custom Tag",
                        "name": "tag",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "301": {
                        "description": "Moved Permanently"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.RequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.RequestError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.BadRequestError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "You exhausted your limit"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 400
                },
                "timeToReset": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "models.CreateRequest": {
            "type": "object",
            "properties": {
                "customTag": {
                    "type": "string",
                    "example": "net-short"
                },
                "expireTime": {
                    "type": "integer",
                    "example": 10
                },
                "url": {
                    "type": "string",
                    "example": "www.netlify.com"
                }
            }
        },
        "models.CreateResponse": {
            "type": "object",
            "properties": {
                "customTag": {
                    "type": "string",
                    "example": "net-short"
                },
                "expireTime": {
                    "type": "integer",
                    "example": 10
                },
                "rateLimit": {
                    "type": "integer",
                    "example": 29
                },
                "rateLimitReset": {
                    "type": "integer",
                    "example": 29
                },
                "url": {
                    "type": "string",
                    "example": "www.netlify.com"
                }
            }
        },
        "models.RequestError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal Server Error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 500
                }
            }
        }
    }
}